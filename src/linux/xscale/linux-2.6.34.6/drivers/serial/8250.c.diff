--- a/drivers/serial/8250.c
+++ b/drivers/serial/8250.c
@@ -417,6 +417,20 @@ static void mem_serial_out(struct uart_p
 	writeb(value, p->membase + offset);
 }
 
+static unsigned int memdelay_serial_in(struct uart_port *p, int offset)
+{
+	struct uart_8250_port *up = (struct uart_8250_port *)p;
+	udelay(up->port.rw_delay);
+	return mem_serial_in(p, offset);
+}
+
+static void memdelay_serial_out(struct uart_port *p, int offset, int value)
+{
+	struct uart_8250_port *up = (struct uart_8250_port *)p;
+	udelay(up->port.rw_delay);
+	mem_serial_out(p, offset, value);
+}
+
 static void mem32_serial_out(struct uart_port *p, int offset, int value)
 {
 	offset = map_8250_out_reg(p, offset) << p->regshift;
@@ -508,6 +522,11 @@ static void set_io_from_upio(struct uart
 		p->serial_out = mem32_serial_out;
 		break;
 
+	case UPIO_MEM_DELAY:
+		p->serial_in = memdelay_serial_in;
+		p->serial_out = memdelay_serial_out;
+		break;
+
 	case UPIO_AU:
 		p->serial_in = au_serial_in;
 		p->serial_out = au_serial_out;
@@ -539,6 +558,7 @@ serial_out_sync(struct uart_8250_port *u
 	switch (p->iotype) {
 	case UPIO_MEM:
 	case UPIO_MEM32:
+	case UPIO_MEM_DELAY:
 	case UPIO_AU:
 	case UPIO_DWAPB:
 		p->serial_out(p, offset, value);
@@ -2477,6 +2497,7 @@ static int serial8250_request_std_resour
 	case UPIO_MEM32:
 	case UPIO_MEM:
 	case UPIO_DWAPB:
+	case UPIO_MEM_DELAY:
 		if (!up->port.mapbase)
 			break;
 
@@ -2514,6 +2535,7 @@ static void serial8250_release_std_resou
 	case UPIO_MEM32:
 	case UPIO_MEM:
 	case UPIO_DWAPB:
+	case UPIO_MEM_DELAY:
 		if (!up->port.mapbase)
 			break;
 
@@ -3011,6 +3033,7 @@ static int __devinit serial8250_probe(st
 		port.serial_out		= p->serial_out;
 		port.set_termios	= p->set_termios;
 		port.dev		= &dev->dev;
+		port.rw_delay		= p->rw_delay;
 		port.irqflags		|= irqflag;
 		ret = serial8250_register_port(&port);
 		if (ret < 0) {
@@ -3160,6 +3183,7 @@ int serial8250_register_port(struct uart
 		uart->port.iotype       = port->iotype;
 		uart->port.flags        = port->flags | UPF_BOOT_AUTOCONF;
 		uart->port.mapbase      = port->mapbase;
+		uart->port.rw_delay			= port->rw_delay;
 		uart->port.private_data = port->private_data;
 		if (port->dev)
 			uart->port.dev = port->dev;
