Index: Kconfig
===================================================================
--- Kconfig	(revision 8880)
+++ Kconfig	(working copy)
@@ -25,6 +25,14 @@
 	  Avila Network Platform. For more information on this platform,
 	  see <file:Documentation/arm/IXP4xx>.
 
+config MACH_CAMBRIA
+	bool "Cambria"
+	select PCI
+	help
+	  Say 'Y' here if you want your kernel to support the Gateworks
+	  Avila Network Platform. For more information on this platform,
+	  see <file:Documentation/arm/IXP4xx>.
+
 config MACH_LOFT
     bool "Loft"
     depends on MACH_AVILA
@@ -50,6 +58,16 @@
 	  Engineering Coyote Gateway Reference Platform. For more
 	  information on this platform, see <file:Documentation/arm/IXP4xx>.
 
+config ARCH_ADI_COYOTE_WRT300N
+	bool "Coyote (WRT300N)"
+	select PCI
+	depends on ARCH_ADI_COYOTE
+	help
+	  Say 'Y' here if you want your kernel to support the ADI 
+	  Engineering Coyote Gateway Reference Platform. For more
+	  information on this platform, see <file:Documentation/arm/IXP4xx>.
+
+
 config MACH_GATEWAY7001
 	bool "Gateway 7001"
 	select PCI
@@ -192,7 +210,7 @@
 
 config CPU_IXP43X
 	bool
-	depends on MACH_KIXRP435
+	depends on MACH_KIXRP435 || MACH_CAMBRIA
 	default y
 
 config MACH_GTWX5715
@@ -220,6 +238,11 @@
 	default y
 	depends on PCI
 
+config DMABOUNCE_DEBUG
+	bool "Enable DMABounce debuging"
+	default n
+	depends on DMABOUNCE
+
 config IXP4XX_INDIRECT_PCI
 	bool "Use indirect PCI memory access"
 	depends on PCI
Index: avila-pci.c
===================================================================
--- avila-pci.c	(revision 8880)
+++ avila-pci.c	(working copy)
@@ -69,7 +69,7 @@
 
 int __init avila_pci_init(void)
 {
-	if (machine_is_avila() || machine_is_loft())
+	if (machine_is_avila() || machine_is_loft() || machine_is_cambria())
 		pci_common_init(&avila_pci);
 	return 0;
 }
Index: cambria-pci.c
===================================================================
--- cambria-pci.c	(revision 0)
+++ cambria-pci.c	(revision 9521)
@@ -0,0 +1,74 @@
+/*
+ * arch/arm/mach-ixp4xx/cambria-pci.c 
+ *
+ * Cambria board-level PCI initialization
+ *
+ * Copyright (C) 2002 Intel Corporation.
+ * Copyright (C) 2003-2004 MontaVista Software, Inc.
+ *
+ * Maintainer: Deepak Saxena <dsaxena@plexity.net>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/pci.h>
+#include <linux/init.h>
+#include <linux/irq.h>
+#include <linux/delay.h>
+
+#include <asm/mach/pci.h>
+#include <asm/irq.h>
+#include <asm/hardware.h>
+#include <asm/mach-types.h>
+
+void __init cambria_pci_preinit(void)
+{
+	set_irq_type(IRQ_CAMBRIA_PCI_INTA, IRQT_LOW);
+	set_irq_type(IRQ_CAMBRIA_PCI_INTB, IRQT_LOW);
+	set_irq_type(IRQ_CAMBRIA_PCI_INTC, IRQT_LOW);
+	set_irq_type(IRQ_CAMBRIA_PCI_INTD, IRQT_LOW);
+
+	ixp4xx_pci_preinit();
+}
+
+static int __init cambria_map_irq(struct pci_dev *dev, u8 slot, u8 pin)
+{
+	static int pci_irq_table[CAMBRIA_PCI_IRQ_LINES] = {
+		IRQ_CAMBRIA_PCI_INTA,
+		IRQ_CAMBRIA_PCI_INTB,
+		IRQ_CAMBRIA_PCI_INTC,
+		IRQ_CAMBRIA_PCI_INTD
+	};
+
+	int irq = -1;
+
+	if (slot >= 1 && slot <= CAMBRIA_PCI_MAX_DEV && 
+		pin >= 1 && pin <= CAMBRIA_PCI_IRQ_LINES) {
+		irq = pci_irq_table[(slot + pin - 2) % 4];
+	}
+
+	return irq;
+}
+
+struct hw_pci cambria_pci __initdata = {
+	.nr_controllers = 1,
+	.preinit	= cambria_pci_preinit,
+	.swizzle	= pci_std_swizzle,
+	.setup		= ixp4xx_setup,
+	.scan		= ixp4xx_scan_bus,
+	.map_irq	= cambria_map_irq,
+};
+
+int __init cambria_pci_init(void)
+{
+	if (machine_is_cambria())
+		pci_common_init(&cambria_pci);
+	return 0;
+}
+
+subsys_initcall(cambria_pci_init);
+
Index: avila-setup.c
===================================================================
--- avila-setup.c	(revision 8880)
+++ avila-setup.c	(working copy)
@@ -190,6 +190,7 @@
 	.init_machine	= avila_init,
 MACHINE_END
 
+
  /*
   * Loft is functionally equivalent to Avila except that it has a
   * different number for the maximum PCI devices.  The MACHINE
Index: Makefile
===================================================================
--- Makefile	(revision 8880)
+++ Makefile	(working copy)
@@ -7,6 +7,7 @@
 
 obj-pci-$(CONFIG_ARCH_IXDP4XX)		+= ixdp425-pci.o
 obj-pci-$(CONFIG_MACH_AVILA)		+= avila-pci.o
+obj-pci-$(CONFIG_MACH_CAMBRIA)		+= cambria-pci.o
 obj-pci-$(CONFIG_MACH_IXDPG425)		+= ixdpg425-pci.o
 obj-pci-$(CONFIG_ARCH_ADI_COYOTE)	+= coyote-pci.o
 obj-pci-$(CONFIG_MACH_GTWX5715)		+= gtwx5715-pci.o
@@ -25,6 +26,7 @@
 
 obj-$(CONFIG_ARCH_IXDP4XX)	+= ixdp425-setup.o
 obj-$(CONFIG_MACH_AVILA)	+= avila-setup.o
+obj-$(CONFIG_MACH_CAMBRIA)	+= cambria-setup.o
 obj-$(CONFIG_MACH_IXDPG425)	+= coyote-setup.o
 obj-$(CONFIG_ARCH_ADI_COYOTE)	+= coyote-setup.o
 obj-$(CONFIG_MACH_GTWX5715)	+= gtwx5715-setup.o
Index: cambria-setup.c
===================================================================
--- cambria-setup.c	(revision 0)
+++ cambria-setup.c	(revision 9521)
@@ -0,0 +1,184 @@
+/*
+ * arch/arm/mach-ixp4xx/cambria-setup.c
+ *
+ * Cambria board-setup 
+ *
+ * Copyright (C) 2008 Gateworks Corporation
+ *
+ * Author: Chris Lang <clang@gateworks.com
+ *
+ *
+ * Based largely on ixdp425_setup.c
+ * 		Author: Deepak Saxena <dsaxena@plexity.net>
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/device.h>
+#include <linux/serial.h>
+#include <linux/tty.h>
+#include <linux/serial_8250.h>
+#include <linux/slab.h>
+
+#include <asm/types.h>
+#include <asm/setup.h>
+#include <asm/memory.h>
+#include <asm/hardware.h>
+#include <asm/mach-types.h>
+#include <asm/irq.h>
+#include <asm/mach/arch.h>
+#include <asm/mach/flash.h>
+#include <asm/io.h>
+
+static struct flash_platform_data cambria_flash_data = {
+	.map_name	= "cfi_probe",
+	.width		= 2,
+};
+
+static struct resource cambria_flash_resource = {
+	.flags		= IORESOURCE_MEM,
+};
+
+static struct platform_device cambria_flash = {
+	.name		= "IXP4XX-Flash",
+	.id		= 0,
+	.dev		= {
+		.platform_data = &cambria_flash_data,
+	},
+	.num_resources	= 1,
+	.resource	= &cambria_flash_resource,
+};
+
+static struct ixp4xx_i2c_pins cambria_i2c_gpio_pins = {
+	.sda_pin	= CAMBRIA_SDA_PIN,
+	.scl_pin	= CAMBRIA_SCL_PIN,
+};
+
+static struct platform_device cambria_i2c_controller = {
+	.name		= "IXP4XX-I2C",
+	.id		= 0,
+	.dev		= {
+		.platform_data = &cambria_i2c_gpio_pins,
+	},
+	.num_resources	= 0
+};
+
+static struct resource cambria_uart_resources[] = {
+	{
+		.start		= IXP4XX_UART1_BASE_PHYS,
+		.end		= IXP4XX_UART1_BASE_PHYS + 0x0fff,
+		.flags		= IORESOURCE_MEM
+	}
+};
+
+static struct plat_serial8250_port cambria_uart_data[] = {
+	{
+		.mapbase	= IXP4XX_UART1_BASE_PHYS,
+		.membase	= (char *)IXP4XX_UART1_BASE_VIRT + REG_OFFSET,
+		.irq		= IRQ_IXP4XX_UART1,
+		.flags		= UPF_BOOT_AUTOCONF | UPF_SKIP_TEST,
+		.iotype		= UPIO_MEM,
+		.regshift	= 2,
+		.uartclk	= IXP4XX_UART_XTAL,
+	},
+	{ },
+};
+
+static struct platform_device cambria_uart = {
+	.name			= "serial8250",
+	.id			= PLAT8250_DEV_PLATFORM,
+	.dev.platform_data	= cambria_uart_data,
+	.num_resources		= 1,
+	.resource		= cambria_uart_resources
+};
+
+static struct resource cambria_pata_resources[] = {
+  {
+    .flags  = IORESOURCE_MEM
+  },
+  {
+    .flags  = IORESOURCE_MEM,
+  },
+  {
+    .name = "intrq",
+    .start  = IRQ_IXP4XX_GPIO12,
+    .end  = IRQ_IXP4XX_GPIO12,
+    .flags  = IORESOURCE_IRQ,
+  },
+};
+
+static struct ixp4xx_pata_data cambria_pata_data = {
+  .cs0_bits = 0xbfff3c03,
+	.cs1_bits = 0xbfff3c03,
+};
+
+static struct platform_device cambria_pata = {
+  .name     = "pata_ixp4xx_cf",
+  .id     = 0,
+  .dev.platform_data      = &cambria_pata_data,
+  .num_resources    = ARRAY_SIZE(cambria_pata_resources),
+  .resource   = cambria_pata_resources,
+};
+
+static struct platform_device cambria_leds_pld = {
+  .name   = "IXP4XX-PLD-LED",
+  .id   = -1,
+  .num_resources  = 0,
+  //.resource = avila_led_resources,
+};
+
+static struct platform_device cambria_leds_mem = {
+  .name   = "IXP4XX-MEM-LED",
+  .id   = -1,
+  .num_resources  = 0,
+  //.resource = avila_led_resources,
+};
+
+
+static struct platform_device *cambria_devices[] __initdata = {
+	&cambria_i2c_controller,
+	&cambria_flash,
+	&cambria_uart,
+	&cambria_leds_pld,
+	&cambria_leds_mem
+};
+
+static void __init cambria_init(void)
+{
+	ixp4xx_sys_init();
+
+	cambria_flash_resource.start = IXP4XX_EXP_BUS_BASE(0);
+	cambria_flash_resource.end =
+		IXP4XX_EXP_BUS_BASE(0) + ixp4xx_exp_bus_size + ixp4xx_exp_bus_size - 1;
+
+	if (cpu_is_ixp43x()) {
+		cambria_uart.num_resources = 1;
+		cambria_uart_data[1].flags = 0;
+	}
+
+	platform_add_devices(cambria_devices, ARRAY_SIZE(cambria_devices));
+
+  cambria_pata_resources[0].start = 0x53e00000;
+  cambria_pata_resources[0].end = 0x53e3ffff;
+
+  cambria_pata_resources[1].start = 0x53e40000;
+  cambria_pata_resources[1].end = 0x53e7ffff;
+
+  cambria_pata_data.cs0_cfg = IXP4XX_EXP_CS3;
+  cambria_pata_data.cs1_cfg = IXP4XX_EXP_CS3;
+
+  platform_device_register(&cambria_pata);
+}
+
+
+MACHINE_START(CAMBRIA, "Gateworks Cambria Series")
+  /* Maintainer: Chris Lang <clang@gateworks.com> */
+  .phys_io  = IXP4XX_PERIPHERAL_BASE_PHYS,
+  .io_pg_offst  = ((IXP4XX_PERIPHERAL_BASE_VIRT) >> 18) & 0xfffc,
+  .map_io   = ixp4xx_map_io,
+  .init_irq = ixp4xx_init_irq,
+  .timer    = &ixp4xx_timer,
+  .boot_params  = 0x0100,
+  .init_machine = cambria_init,
+MACHINE_END
+

Property changes on: cambria-setup.c
___________________________________________________________________
Name: svn:executable
   + *

Index: ixdp425-setup.c
===================================================================
--- ixdp425-setup.c	(revision 8880)
+++ ixdp425-setup.c	(working copy)
@@ -296,3 +296,4 @@
 	.init_machine	= ixdp425_init,
 MACHINE_END
 #endif
+
Index: compex-setup.c
===================================================================
--- compex-setup.c	(revision 8880)
+++ compex-setup.c	(working copy)
@@ -101,13 +101,13 @@
 
 	compex_flash_resource.start = IXP4XX_EXP_BUS_BASE(0);
 	compex_flash_resource.end =
-		IXP4XX_EXP_BUS_BASE(0) + ixp4xx_exp_bus_size - 1;
+		IXP4XX_EXP_BUS_BASE(0) + SZ_32M - 1;
 
 	platform_add_devices(compex_devices, ARRAY_SIZE(compex_devices));
 }
 
 #ifdef CONFIG_MACH_COMPEX
-MACHINE_START(COMPEX, "Compex WP18 / NP18A")
+MACHINE_START(COMPEX, "Compex WP188")
 	/* Maintainer: Imre Kaloz <Kaloz@openwrt.org> */
 	.phys_io	= IXP4XX_PERIPHERAL_BASE_PHYS,
 	.io_pg_offst	= ((IXP4XX_PERIPHERAL_BASE_VIRT) >> 18) & 0xfffc,
