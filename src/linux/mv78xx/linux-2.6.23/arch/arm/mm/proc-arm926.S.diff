diff -urN linux-2.6.22.18.orig/arch/arm/mm/proc-arm926.S linux-2.6.22.18/arch/arm/mm/proc-arm926.S
--- linux-2.6.22.18.orig/arch/arm/mm/proc-arm926.S	2008-02-11 08:31:19.000000000 +0100
+++ linux-2.6.22.18/arch/arm/mm/proc-arm926.S	2008-09-03 19:35:00.000000000 +0200
@@ -43,13 +43,35 @@
  * This value should be chosen such that we choose the cheapest
  * alternative.
  */
-#define CACHE_DLIMIT	16384
+#if (CONFIG_MV_DCACHE_SIZE == 0x4000)                         
+#define CACHE_DLIMIT               8192                       
+#else                                                         
+#define CACHE_DLIMIT    16384              
+#endif   
 
 /*
  * the cache line size of the I and D cache
  */
 #define CACHE_DLINESIZE	32
 
+#ifdef CONFIG_ARCH_FEROCEON_ORION      
+#include <asm/arch/orion_ver_macro.h>                         
+#endif
+#ifdef CONFIG_ARCH_FEROCEON_KW      
+#include <asm/arch/kw_macro.h>
+#include "../mach-feroceon-kw/kw_family/ctrlEnv/sys/mvCpuIfRegs.h"
+#include "../mach-feroceon-kw/config/mvSysHwConfig.h"
+#define L2_WT_BIT_MASK  0x10
+#endif      
+#ifdef CONFIG_ARCH_FEROCEON_MV78XX0    
+#include <asm/arch/mv78xx0_macro.h>
+#include "../mach-feroceon-mv78xx0/mv78xx0_family/ctrlEnv/sys/mvCpuIfRegs.h"
+#include "../mach-feroceon-mv78xx0/config/mvSysHwConfig.h"
+#define CPU_L2_CONFIG_REG 0x20104
+#define L2_WT_BIT_MASK  0x20000
+#define CPU_CORE1       0x4000
+#endif      
+
 	.text
 /*
  * cpu_arm926_proc_init()
@@ -65,6 +87,10 @@
 	mov	ip, #PSR_F_BIT | PSR_I_BIT | SVC_MODE
 	msr	cpsr_c, ip
 	bl	arm926_flush_kern_cache_all
+#ifdef CONFIG_L2_CACHE_ENABLE
+	mcr	p15, 1, r0, c15, c9, 0		@ clean entire L2 cache
+	mcr	p15, 0, r0, c7, c10, 4		@ Drain write buffer
+#endif
 	mrc	p15, 0, r0, c1, c0, 0		@ ctrl register
 	bic	r0, r0, #0x1000			@ ...i............
 	bic	r0, r0, #0x000e			@ ............wca.
@@ -101,6 +127,17 @@
  */
 	.align	10
 ENTRY(cpu_arm926_do_idle)
+#ifdef CONFIG_ARCH_FEROCEON      
+        /* Implement workaround for FEr# CPU-C16: Wait for interrupt command */
+        /* is not processed properly, the workaround is not to use this command */
+        /* the erratum is relevant for 5281 devices with revision less than C0 */
+
+        ldr     r0, support_wait_for_interrupt_address /* this variable set in core.c*/
+        ldr     r0, [r0]
+        cmp     r0, #1    /* check if the device doesn't support wait for interrupt*/
+        bne     1f        /* if yes, then go out*/
+        /* workaround ends here*/
+#endif
 	mov	r0, #0
 	mrc	p15, 0, r1, c1, c0, 0		@ Read control register
 	mcr	p15, 0, r0, c7, c10, 4		@ Drain write buffer
@@ -108,8 +145,12 @@
 	mcr	p15, 0, r2, c1, c0, 0		@ Disable I cache
 	mcr	p15, 0, r0, c7, c0, 4		@ Wait for interrupt
 	mcr	p15, 0, r1, c1, c0, 0		@ Restore ICache enable
+#ifdef CONFIG_ARCH_FEROCEON
+1:
+#endif
 	mov	pc, lr
 
+
 /*
  *	flush_user_cache_all()
  *
@@ -242,18 +283,45 @@
  * (same as v4wb)
  */
 ENTRY(arm926_dma_inv_range)
-#ifndef CONFIG_CPU_DCACHE_WRITETHROUGH
+#if !defined(CONFIG_CPU_DCACHE_WRITETHROUGH) || !defined(CONFIG_CPU_L2_DCACHE_WRITETHROUGH)
 	tst	r0, #CACHE_DLINESIZE - 1
+  #ifndef CONFIG_CPU_DCACHE_WRITETHROUGH
 	mcrne	p15, 0, r0, c7, c10, 1		@ clean D entry
+  #endif
+ #ifdef CONFIG_L2_CACHE_ENABLE
+    #ifndef CONFIG_CPU_L2_DCACHE_WRITETHROUGH
+	mcrne	p15, 1, r0, c15, c9, 1		@ clean L2 entry
+   #endif
+ #endif
+
+mcrne	p15, 0, r0, c7, c10, 4		@ drain WB
+
 	tst	r1, #CACHE_DLINESIZE - 1
+#ifndef CONFIG_CPU_DCACHE_WRITETHROUGH
 	mcrne	p15, 0, r1, c7, c10, 1		@ clean D entry
 #endif
-	bic	r0, r0, #CACHE_DLINESIZE - 1
-1:	mcr	p15, 0, r0, c7, c6, 1		@ invalidate D entry
-	add	r0, r0, #CACHE_DLINESIZE
-	cmp	r0, r1
-	blo	1b
-	mcr	p15, 0, r0, c7, c10, 4		@ drain WB
+#ifdef CONFIG_L2_CACHE_ENABLE
+  #ifndef CONFIG_CPU_L2_DCACHE_WRITETHROUGH
+	mcrne	p15, 1, r1, c15, c9, 1		@ clean L2 entry
+  #endif
+#endif
+mcrne	p15, 0, r0, c7, c10, 4		@ drain WB
+#endif
+
+ 	cmp	r1, r0
+	subne	r1, r1, #1			@ Prevent cleaning of top address 
+						@ cache line when top is cache line aligned
+	mrs	r2, cpsr
+	orr	r3, r2, #PSR_F_BIT | PSR_I_BIT
+	msr	cpsr_c, r3			@ Disable interrupts
+        mcr     p15, 5, r0, c15, c14, 0         @ L1 invalidation zone start addr
+        mcr     p15, 5, r1, c15, c14, 1         @ L1 invalidation zone end addr and
+ #ifdef CONFIG_L2_CACHE_ENABLE
+        mcr     p15, 1, r0, c15, c11, 4         @ L2 invalidation zone start addr
+        mcr     p15, 1, r1, c15, c11, 5         @ L2 invalidation zone end addr and 
+                                                @ invalidate procedure trigger
+ #endif
+	msr	cpsr_c, r2			@ Restore interrupts
 	mov	pc, lr
 
 /*
@@ -267,12 +335,23 @@
  * (same as v4wb)
  */
 ENTRY(arm926_dma_clean_range)
+#if !defined(CONFIG_CPU_DCACHE_WRITETHROUGH) || !defined(CONFIG_CPU_L2_DCACHE_WRITETHROUGH)
+	cmp	r1, r0
+	subne	r1, r1, #1			@ Prevent cleaning of top address 
+						@ cache line when top is cache line aligned
+	mrs	r2, cpsr
+	orr	r3, r2, #PSR_F_BIT | PSR_I_BIT
+	msr	cpsr_c, r3			@ Disable interrupts
 #ifndef CONFIG_CPU_DCACHE_WRITETHROUGH
-	bic	r0, r0, #CACHE_DLINESIZE - 1
-1:	mcr	p15, 0, r0, c7, c10, 1		@ clean D entry
-	add	r0, r0, #CACHE_DLINESIZE
-	cmp	r0, r1
-	blo	1b
+        mcr     p15, 5, r0, c15, c13, 0         @ L1 DCache clean zone start addr
+        mcr     p15, 5, r1, c15, c13, 1         @ L1 DCache clean zone end addr and
+#endif 
+#ifndef CONFIG_CPU_L2_DCACHE_WRITETHROUGH
+        mcr     p15, 1, r0, c15, c9, 4          @ L2 Cache clean zone start addr
+        mcr     p15, 1, r1, c15, c9, 5          @ L2 Cache clean zone end addr and 
+                                                @ invalidate procedure trigger
+#endif
+	msr	cpsr_c, r2			@ Restore interrupts
 #endif
 	mcr	p15, 0, r0, c7, c10, 4		@ drain WB
 	mov	pc, lr
@@ -286,16 +365,29 @@
  *	- end	- virtual end address
  */
 ENTRY(arm926_dma_flush_range)
-	bic	r0, r0, #CACHE_DLINESIZE - 1
-1:
+	cmp	r1, r0
+	subne	r1, r1, #1			@ Prevent cleaning of top address 
+						@ cache line when top is cache line aligned
+	mrs	r2, cpsr
+	orr	r3, r2, #PSR_F_BIT | PSR_I_BIT
+	msr	cpsr_c, r3			@ Disable interrupts
 #ifndef CONFIG_CPU_DCACHE_WRITETHROUGH
-	mcr	p15, 0, r0, c7, c14, 1		@ clean+invalidate D entry
+        mcr     p15, 5, r0, c15, c15, 0         @ L1 DCache clean+inv zone start addr
+        mcr     p15, 5, r1, c15, c15, 1         @ L1 DCache clean+inv zone end addr and 
 #else
-	mcr	p15, 0, r0, c7, c10, 1		@ clean D entry
+        mcr     p15, 5, r0, c15, c14, 0         @ L1 invalidation zone start addr
+        mcr     p15, 5, r1, c15, c14, 1         @ L1 invalidation zone end addr and
 #endif
-	add	r0, r0, #CACHE_DLINESIZE
-	cmp	r0, r1
-	blo	1b
+#ifdef CONFIG_L2_CACHE_ENABLE
+  #ifndef CONFIG_CPU_L2_DCACHE_WRITETHROUGH
+        mcr     p15, 1, r0, c15, c9, 4          @ L2 Cache clean zone start addr
+        mcr     p15, 1, r1, c15, c9, 5          @ L2 Cache clean zone end addr and
+  #endif 
+        mcr     p15, 1, r0, c15, c11, 4         @ L2 invalidation zone start addr
+        mcr     p15, 1, r1, c15, c11, 5         @ L2 invalidation zone end addr and 
+                                                @ invalidate procedure trigger
+#endif
+	msr	cpsr_c, r2			@ Restore interrupts
 	mcr	p15, 0, r0, c7, c10, 4		@ drain WB
 	mov	pc, lr
 
@@ -313,6 +405,10 @@
 ENTRY(cpu_arm926_dcache_clean_area)
 #ifndef CONFIG_CPU_DCACHE_WRITETHROUGH
 1:	mcr	p15, 0, r0, c7, c10, 1		@ clean D entry
+#ifdef CONFIG_L2_CACHE_ENABLE
+	mcr	p15, 0, r0, c7, c10, 4		@ drain WB
+	mcr	p15, 1, r0, c15, c9, 1		@ clean L2 entry
+#endif
 	add	r0, r0, #CACHE_DLINESIZE
 	subs	r1, r1, #CACHE_DLINESIZE
 	bhi	1b
@@ -337,9 +433,14 @@
 	mcr	p15, 0, ip, c7, c6, 0		@ invalidate D cache
 #else
 @ && 'Clean & Invalidate whole DCache'
+#ifdef CONFIG_ARCH_FEROCEON
+        mv_flush_all r1, r2, r3, ip
+        mov     ip, #0
+#else
 1:	mrc	p15, 0, r15, c7, c14, 3 	@ test,clean,invalidate
 	bne	1b
 #endif
+#endif
 	mcr	p15, 0, ip, c7, c5, 0		@ invalidate I cache
 	mcr	p15, 0, ip, c7, c10, 4		@ drain WB
 	mcr	p15, 0, r0, c2, c0, 0		@ load page table pointer
@@ -381,6 +482,10 @@
 	mov	r0, r0
 #ifndef CONFIG_CPU_DCACHE_WRITETHROUGH
 	mcr	p15, 0, r0, c7, c10, 1		@ clean D entry
+#ifdef CONFIG_L2_CACHE_ENABLE
+	mcr	p15, 0, r0, c7, c10, 4		@ drain WB
+	mcr	p15, 1, r0, c15, c9, 1		@ clean L2 entry
+#endif
 #endif
 	mcr	p15, 0, r0, c7, c10, 4		@ drain WB
 #endif
@@ -392,6 +497,9 @@
 __arm926_setup:
 	mov	r0, #0
 	mcr	p15, 0, r0, c7, c7		@ invalidate I,D caches on v4
+#ifdef CONFIG_L2_CACHE_ENABLE
+//	mcr	p15, 1, r0, c15, c11, 0		@ invalidate L2 caches
+#endif
 	mcr	p15, 0, r0, c7, c10, 4		@ drain write buffer on v4
 #ifdef CONFIG_MMU
 	mcr	p15, 0, r0, c8, c7		@ invalidate I,D TLBs on v4
@@ -405,6 +513,32 @@
 
 	adr	r5, arm926_crval
 	ldmia	r5, {r5, r6}
+#if defined(CONFIG_ARCH_FEROCEON_KW) || defined(CONFIG_ARCH_FEROCEON_MV78XX0)
+	mrc	p15, 1, r0, c15, c1, 0		@ Marvell extra features register
+#ifdef CONFIG_L2_CACHE_ENABLE
+	ldr	r8, =INTER_REGS_BASE
+	ldr	r7, =CPU_L2_CONFIG_REG	
+#if defined(CONFIG_ARCH_FEROCEON_MV78XX0) && defined(CONFIG_MV78200)
+	mrc	p15, 1, r0, c15, c1, 0	 @ get core Id
+	tst 	r0, #CPU_CORE1
+	addne	r7, r7, #0x4000
+#endif
+	orr	r8, r8, r7
+	ldr 	r7, [r8]
+#ifndef CONFIG_CPU_L2_DCACHE_WRITETHROUGH	
+	bic 	r7, r7, #L2_WT_BIT_MASK		@ set L2 wb mode
+#else
+	orr 	r7, r7, #L2_WT_BIT_MASK		@ set L2 wt mode
+#endif
+	str 	r7, [r8]
+
+	orr	r0, r0, #0x01000000		@ disable L2 prefetching
+ 	orr	r0, r0, #0x00400000		@ enable L2 
+#else
+	bic	r0, r0, #0x00400000		@ disable L2 cache
+#endif
+	mcr	p15, 1, r0, c15, c1, 0		
+#endif
 	mrc	p15, 0, r0, c1, c0		@ get control register v4
 	bic	r0, r0, r5
 	orr	r0, r0, r6
@@ -422,8 +556,11 @@
 	 */
 	.type	arm926_crval, #object
 arm926_crval:
+#if defined(CONFIG_ARCH_FEROCEON_KW) || defined(CONFIG_ARCH_FEROCEON_MV78XX0)
+	crval	clear=0x0000773f, mmuset=0x00003135, ucset=0x00001134
+#else
 	crval	clear=0x00007f3f, mmuset=0x00003135, ucset=0x00001134
-
+#endif
 	__INITDATA
 
 /*
@@ -465,7 +602,17 @@
 
 	.type	__arm926_proc_info,#object
 __arm926_proc_info:
-	.long	0x41069260			@ ARM926EJ-S (v5TEJ)
+#ifdef CONFIG_ARCH_FEROCEON
+#if defined(CONFIG_MV88F6183) || defined(CONFIG_ARCH_FEROCEON_MV78XX0)
+	.long   0x41059260                      @ ARM926EJ-S (v5TE)
+#elif  defined(CONFIG_ARCH_FEROCEON_KW)
+	.long   0x56051310                      @ ARM926EJ-S (v5TE)
+#else
+	.long   0x41069260                      @ ARM926EJ-S (v5TE)
+#endif
+#else
+	.long   0x41069260                      @ ARM926EJ-S (v5TE)
+#endif
 	.long	0xff0ffff0
 	.long   PMD_TYPE_SECT | \
 		PMD_SECT_BUFFERABLE | \
@@ -484,6 +631,10 @@
 	.long	cpu_arm926_name
 	.long	arm926_processor_functions
 	.long	v4wbi_tlb_fns
+#ifdef  ARCH_FEROCEON
+        .long   v4wb_wa_user_fns
+#else
 	.long	v4wb_user_fns
+#endif
 	.long	arm926_cache_fns
 	.size	__arm926_proc_info, . - __arm926_proc_info
