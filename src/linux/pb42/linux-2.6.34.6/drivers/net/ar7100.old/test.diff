Index: athrs16_phy.c
===================================================================
--- athrs16_phy.c	(revision 14296)
+++ athrs16_phy.c	(working copy)
@@ -227,6 +227,7 @@
 	hsl_dev_init(0, 2);
 #endif
     printk("athrs16_reg_init complete.\n");
+//    athrs16_reg_write(AR8216_REG_GLOBAL_CTRL,AR8216_GCTRL_MTU,1716 ); //     1500 + 4 /* vlan */ + 2 /* header */);
 
     athr16_init_flag = 1;
 }
Index: athrs16_phy.h
===================================================================
--- athrs16_phy.h	(revision 14296)
+++ athrs16_phy.h	(working copy)
@@ -22,6 +22,11 @@
 #define ATHR_DEBUG_PORT_DATA             30
 
 /* ATHR_PHY_CONTROL fields */
+#define BITS(_s, _n)	(((1UL << (_n)) - 1) << _s)
+#define BIT(nr)			(1UL << (nr))
+#define AR8216_REG_GLOBAL_CTRL		0x0030
+#define AR8216_GCTRL_MTU		BITS(0, 10)
+
 #define ATHR_CTRL_SOFTWARE_RESET                    0x8000
 #define ATHR_CTRL_SPEED_LSB                         0x2000
 #define ATHR_CTRL_AUTONEGOTIATION_ENABLE            0x1000
Index: ag7100.c
===================================================================
--- ag7100.c	(revision 14296)
+++ ag7100.c	(working copy)
@@ -211,6 +211,7 @@
     return (ag7100_ndesc_unused(mac, r) < tx_max_desc_per_ds_pkt + 2);
 }
 
+
 static int
 ag7100_open(struct net_device *dev)
 {
@@ -287,6 +288,7 @@
     napi_enable(&mac->mac_napi);
     ag7100_int_enable(mac);
     ag7100_rx_start(mac);
+    netif_start_queue(dev);
 
     ag7100_start_rx_count(mac);
 
@@ -336,6 +338,74 @@
     return 0;
 }
 
+#define FIFO_CFG0_WTM		BIT(0)	/* Watermark Module */
+#define FIFO_CFG0_RXS		BIT(1)	/* Rx System Module */
+#define FIFO_CFG0_RXF		BIT(2)	/* Rx Fabric Module */
+#define FIFO_CFG0_TXS		BIT(3)	/* Tx System Module */
+#define FIFO_CFG0_TXF		BIT(4)	/* Tx Fabric Module */
+#define FIFO_CFG0_ALL	(FIFO_CFG0_WTM | FIFO_CFG0_RXS | FIFO_CFG0_RXF \
+			| FIFO_CFG0_TXS | FIFO_CFG0_TXF)
+
+#define FIFO_CFG0_ENABLE_SHIFT	8
+
+#define FIFO_CFG4_DE		BIT(0)	/* Drop Event */
+#define FIFO_CFG4_DV		BIT(1)	/* RX_DV Event */
+#define FIFO_CFG4_FC		BIT(2)	/* False Carrier */
+#define FIFO_CFG4_CE		BIT(3)	/* Code Error */
+#define FIFO_CFG4_CR		BIT(4)	/* CRC error */
+#define FIFO_CFG4_LM		BIT(5)	/* Length Mismatch */
+#define FIFO_CFG4_LO		BIT(6)	/* Length out of range */
+#define FIFO_CFG4_OK		BIT(7)	/* Packet is OK */
+#define FIFO_CFG4_MC		BIT(8)	/* Multicast Packet */
+#define FIFO_CFG4_BC		BIT(9)	/* Broadcast Packet */
+#define FIFO_CFG4_DR		BIT(10)	/* Dribble */
+#define FIFO_CFG4_LE		BIT(11)	/* Long Event */
+#define FIFO_CFG4_CF		BIT(12)	/* Control Frame */
+#define FIFO_CFG4_PF		BIT(13)	/* Pause Frame */
+#define FIFO_CFG4_UO		BIT(14)	/* Unsupported Opcode */
+#define FIFO_CFG4_VT		BIT(15)	/* VLAN tag detected */
+#define FIFO_CFG4_FT		BIT(16)	/* Frame Truncated */
+#define FIFO_CFG4_UC		BIT(17)	/* Unicast Packet */
+
+#define FIFO_CFG5_DE		BIT(0)	/* Drop Event */
+#define FIFO_CFG5_DV		BIT(1)	/* RX_DV Event */
+#define FIFO_CFG5_FC		BIT(2)	/* False Carrier */
+#define FIFO_CFG5_CE		BIT(3)	/* Code Error */
+#define FIFO_CFG5_LM		BIT(4)	/* Length Mismatch */
+#define FIFO_CFG5_LO		BIT(5)	/* Length Out of Range */
+#define FIFO_CFG5_OK		BIT(6)	/* Packet is OK */
+#define FIFO_CFG5_MC		BIT(7)	/* Multicast Packet */
+#define FIFO_CFG5_BC		BIT(8)	/* Broadcast Packet */
+#define FIFO_CFG5_DR		BIT(9)	/* Dribble */
+#define FIFO_CFG5_CF		BIT(10)	/* Control Frame */
+#define FIFO_CFG5_PF		BIT(11)	/* Pause Frame */
+#define FIFO_CFG5_UO		BIT(12)	/* Unsupported Opcode */
+#define FIFO_CFG5_VT		BIT(13)	/* VLAN tag detected */
+#define FIFO_CFG5_LE		BIT(14)	/* Long Event */
+#define FIFO_CFG5_FT		BIT(15)	/* Frame Truncated */
+#define FIFO_CFG5_16		BIT(16)	/* unknown */
+#define FIFO_CFG5_17		BIT(17)	/* unknown */
+#define FIFO_CFG5_SF		BIT(18)	/* Short Frame */
+#define FIFO_CFG5_BM		BIT(19)	/* Byte Mode */
+
+
+#define FIFO_CFG0_INIT	(FIFO_CFG0_ALL << FIFO_CFG0_ENABLE_SHIFT)
+
+#define FIFO_CFG4_INIT	(FIFO_CFG4_DE | FIFO_CFG4_DV | FIFO_CFG4_FC | \
+			 FIFO_CFG4_CE | FIFO_CFG4_CR | FIFO_CFG4_LM | \
+			 FIFO_CFG4_LO | FIFO_CFG4_OK | FIFO_CFG4_MC | \
+			 FIFO_CFG4_BC | FIFO_CFG4_DR | FIFO_CFG4_LE | \
+			 FIFO_CFG4_CF | FIFO_CFG4_PF | FIFO_CFG4_UO | \
+			 FIFO_CFG4_VT)
+
+#define FIFO_CFG5_INIT	(FIFO_CFG5_DE | FIFO_CFG5_DV | FIFO_CFG5_FC | \
+			 FIFO_CFG5_CE | FIFO_CFG5_LO | FIFO_CFG5_OK | \
+			 FIFO_CFG5_MC | FIFO_CFG5_BC | FIFO_CFG5_DR | \
+			 FIFO_CFG5_CF | FIFO_CFG5_PF | FIFO_CFG5_VT | \
+			 FIFO_CFG5_LE | FIFO_CFG5_FT | FIFO_CFG5_16 | \
+			 FIFO_CFG5_17 | FIFO_CFG5_SF)
+
+
 static void
 ag7100_hw_setup(ag7100_mac_t *mac)
 {
@@ -372,8 +442,9 @@
 #endif
     ag7100_reg_rmw_set(mac, AG7100_MAC_CFG2, (AG7100_MAC_CFG2_PAD_CRC_EN |
         AG7100_MAC_CFG2_LEN_CHECK));
+    ag7100_reg_wr(mac, AG71XX_REG_MAC_MFL, AG71XX_TX_MTU_LEN);
 
-    ag7100_reg_wr(mac, AG7100_MAC_FIFO_CFG_0, 0x1f00);
+    ag7100_reg_wr(mac, AG7100_MAC_FIFO_CFG_0, FIFO_CFG0_INIT);
     /*
     * set the mii if type - NB reg not in the gigE space
     */
@@ -390,14 +461,9 @@
     /*
     * Weed out junk frames (CRC errored, short collision'ed frames etc.)
     */
-    ag7100_reg_wr(mac, AG7100_MAC_FIFO_CFG_4, 0xffff);
-#ifdef CONFIG_AR9100
-    /* Drop CRC Errors and Pause Frames */
-    ag7100_reg_wr(mac, AG7100_MAC_FIFO_CFG_5, 0x7efef);
-#else
-    ag7100_reg_wr(mac, AG7100_MAC_FIFO_CFG_5, 0x7ffef); 
+    ag7100_reg_wr(mac, AG7100_MAC_FIFO_CFG_4, FIFO_CFG4_INIT);
+    ag7100_reg_wr(mac, AG7100_MAC_FIFO_CFG_5, FIFO_CFG5_INIT);
 #endif
-#endif
 
     t0  =  &tx->ring_desc[0];
     r0  =  &rx->ring_desc[0];
@@ -575,13 +641,11 @@
     mac->speed_10t = 1;
     while(i-- && mac->speed_10t) {
         netif_carrier_on(dev);
-        netif_start_queue(dev);
 
         mdelay(100);
         ag7100_hard_start(dummy_pkt,dev); 
 
         netif_carrier_off(dev);
-        netif_stop_queue(dev);
     }
     return ;
 }
@@ -880,7 +944,6 @@
         {
             printk(MODULE_NAME ": unit %d: phy not up carrier %d\n", mac->mac_unit, carrier);
             netif_carrier_off(dev);
-            netif_stop_queue(dev);
         }
         goto done;
     }
@@ -913,7 +976,6 @@
     * in business
     */
     netif_carrier_on(dev);
-    netif_start_queue(dev);
 
 done:
 #if defined(CONFIG_ATHRS26_PHY) || defined(CONFIG_ATHRS16_PHY)    
@@ -1676,7 +1738,7 @@
 #if 0//def CONFIG_CAMEO_REALTEK_PHY
     skb = dev_alloc_skb(AG7100_RX_BUF_SIZE+4);
 #else
-    skb = dev_alloc_skb(AG7100_RX_BUF_SIZE);
+    skb = dev_alloc_skb(AG7100_RX_BUF_SIZE + AG7100_RX_RESERVE);
 #endif
     if (unlikely(!skb))
         return NULL;
Index: ag7100.h
===================================================================
--- ag7100.h	(revision 14296)
+++ ag7100.h	(working copy)
@@ -25,6 +25,7 @@
     uint32_t    pkt_size       : 12;
 
     uint32_t    next_desc      ;
+    uint32_t 	pad;
 }ag7100_desc_t;
 
 /*
@@ -156,6 +157,8 @@
  * Plus Reserve extra head room for wmac
  */
 #define ETHERNET_FCS_SIZE            4
+#define AG71XX_TX_FIFO_LEN	2048
+#define AG71XX_TX_MTU_LEN	1536
 #define AG7100_RX_RESERVE           (64)
 #define AG7100_RX_BUF_SIZE      \
     (AG7100_RX_RESERVE + ETH_HLEN + ETH_FRAME_LEN + ETHERNET_FCS_SIZE)
@@ -203,6 +206,9 @@
 #define AG7100_MAC_CFG1             0x00
 #define AG7100_MAC_CFG2             0x04
 #define AG7100_MAC_IFCTL            0x38
+#define AG71XX_REG_MAC_IPG	  0x0008
+#define AG71XX_REG_MAC_HDX	  0x000c
+#define AG71XX_REG_MAC_MFL	  0x0010
 
 /*
  * fifo control registers
Index: athrs26_phy.c
===================================================================
--- athrs26_phy.c	(revision 14296)
+++ athrs26_phy.c	(working copy)
@@ -303,7 +303,7 @@
     athrs26_reg_write(0x68, 0x55555555);    
     athrs26_reg_write(0x6c, 0x0);    
 
-    athrs26_reg_write(0x70, 0x41af);
+//    athrs26_reg_write(0x70, 0x41af);
 
 
 #if defined(CONFIG_VLAN_8021Q) || defined(CONFIG_VLAN_8021Q_MODULE)
@@ -315,7 +315,9 @@
 #ifdef FULL_FEATURE
     athena_init(0, 2);
 #endif
+    athrs26_reg_write(0x30,(athrs26_reg_read(0x30)&0xfffff800)|0x6b4);
 
+
     athr26_init_flag = 1;
 }
 
@@ -335,7 +337,6 @@
         return;
         
     netif_carrier_off(dev);
-    netif_stop_queue(dev);
     phy_val_saved = phy_reg_read(0, ATHR_PHY4_ADDR, ATHR_PHY_CONTROL);
     phy_reg_write(0, ATHR_PHY4_ADDR, ATHR_PHY_CONTROL, phy_val_saved | 0x800);
 }
Index: athrs26_phy.h
===================================================================
--- athrs26_phy.h	(revision 14296)
+++ athrs26_phy.h	(working copy)
@@ -21,6 +21,11 @@
 #define ATHR_DEBUG_PORT_ADDRESS          29
 #define ATHR_DEBUG_PORT_DATA             30
 
+#define BITS(_s, _n)	(((1UL << (_n)) - 1) << _s)
+#define BIT(nr)			(1UL << (nr))
+#define AR8216_REG_GLOBAL_CTRL		0x0030
+#define AR8216_GCTRL_MTU		BITS(0, 10)
+
 /* ATHR_PHY_CONTROL fields */
 #define ATHR_CTRL_SOFTWARE_RESET                    0x8000
 #define ATHR_CTRL_SPEED_LSB                         0x2000
