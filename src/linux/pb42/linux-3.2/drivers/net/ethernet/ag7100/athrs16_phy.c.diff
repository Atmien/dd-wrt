diff -urN 1.4.0.94/linux/drivers/net/ag7100/athrs16_phy.c 1.4.0.144/linux/drivers/net/ag7100/athrs16_phy.c
--- 1.4.0.94/linux/drivers/net/ag7100/athrs16_phy.c	2009-06-11 20:46:37.000000000 +0200
+++ 1.4.0.144/linux/drivers/net/ag7100/athrs16_phy.c	2009-12-31 11:26:44.000000000 +0100
@@ -20,6 +20,16 @@
 #include "ag7100_phy.h"
 #include "ag7100.h"
 
+#ifdef FULL_FEATURE
+extern void* ssdk_mdio_set;
+extern void* ssdk_mdio_get;
+#endif
+
+#ifdef FULL_FEATURE
+extern void* ssdk_mdio_set;
+extern void* ssdk_mdio_get;
+#endif
+
 /* PHY selections and access functions */
 typedef enum {
     PHY_SRCPORT_INFO, 
@@ -157,7 +167,7 @@
 static uint32_t athrs16_reg_read(uint32_t reg_addr);
 static void athrs16_reg_write(uint32_t reg_addr, uint32_t reg_val);
 
-void phy_mode_setup() 
+void phy_mode_setup(void) 
 {
     printk("phy_mode_setup\n");
 
@@ -175,6 +185,55 @@
 
 }
 
+static BOOL
+athrs16_bist_test(void)
+{
+    uint32_t times = 2, regc = 0xa0, regr = 0xa4, data = 0, i;
+
+    while (--times) {
+        athrs16_reg_write(regc, 0x80700000);
+
+        i = 0x1000;
+        while(i--) {
+            if(!(athrs16_reg_read(regc)&0x80000000))
+                break;
+            udelay(5);
+        }
+
+        if (0 == i)
+            return FALSE;
+
+        data = athrs16_reg_read(regc);
+
+        if(!(data & 0xe000))
+            break;
+        
+        if (!times || !(data & 0x40000000))
+            return FALSE;
+        
+        athrs16_reg_write(regr, (data & 0x1fff) | 0x80000000);
+
+    }
+
+    /* test pass then reset switch */
+    printk(MODULE_NAME ": resetting...\n");
+    athrs16_reg_write(0x0, athrs16_reg_read(0x0)|0x80000000);
+
+    i = 20;
+    while(i--) {
+        mdelay(100);
+        if(!(athrs16_reg_read(0x0)&0x80000000))
+            break;
+    }
+
+    if (i)
+        printk(MODULE_NAME ": reset done.\n");
+    else
+        printk(MODULE_NAME ": reset fail.\n"); 
+
+    return TRUE;
+}
+
 void athrs16_reg_init()
 {
     /* if using header for register configuration, we have to     */
@@ -182,22 +241,32 @@
     if (athr16_init_flag)
         return;
 
+#ifdef FULL_FEATURE
+    ssdk_mdio_set = phy_reg_write;
+    ssdk_mdio_get = phy_reg_read;
+    ssdk_reduced_init(0, 2, 1);
+#else
+    if(FALSE == athrs16_bist_test()) {
+        printk(MODULE_NAME ": bist test fail.\n");
+    }
+#endif
+
     /*Power on strip mode setup*/
-#if CFG_BOARD_PB45
+#if defined  CFG_BOARD_PB45
     athrs16_reg_write(0x208, 0x2fd0001);  /*tx delay*/   
     athrs16_reg_write(0x108, 0x2be0001);  /*mac0 rgmii mode*/ 
-#elif CFG_BOARD_AP96
+#elif defined CFG_BOARD_AP96
     athrs16_reg_write(0x8, 0x012e1bea);
 #endif
     
     athrs16_reg_write(0x100, 0x7e);
-    athrs16_reg_write(0x200, 0x200);
-    athrs16_reg_write(0x300, 0x200);
-    athrs16_reg_write(0x400, 0x200);
-    athrs16_reg_write(0x500, 0x200);
-#if CFG_BOARD_PB45
-    athrs16_reg_write(0x600, 0x200);
-#elif CFG_BOARD_AP96
+    athrs16_reg_write(0x200, 0x1200);
+    athrs16_reg_write(0x300, 0x1200);
+    athrs16_reg_write(0x400, 0x1200);
+    athrs16_reg_write(0x500, 0x1200);
+#if defined CFG_BOARD_PB45
+    athrs16_reg_write(0x600, 0x1200);
+#elif defined CFG_BOARD_AP96
     athrs16_reg_write(0x600, 0x0);
 #endif
 
@@ -223,10 +292,7 @@
 #endif
 #endif
 
-#ifdef FULL_FEATURE
-	hsl_dev_init(0, 2);
-#endif
-    printk("athrs16_reg_init complete.\n");
+    printk(MODULE_NAME ": athrs16_reg_init complete.\n");
 
     athr16_init_flag = 1;
 }
@@ -447,7 +513,7 @@
     uint32_t  phyBase;
     uint32_t  phyAddr;
     int       ii = 200;
-    ag7100_phy_speed_t phySpeed;
+    ag7100_phy_speed_t phySpeed = AG7100_PHY_SPEED_10T;
 
     for (phyUnit=0; phyUnit < ATHR_PHY_MAX; phyUnit++) {
         if (!ATHR_IS_ETHUNIT(phyUnit, ethUnit)) {
