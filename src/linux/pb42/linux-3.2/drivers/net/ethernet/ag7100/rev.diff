Index: ag7100.c
===================================================================
--- ag7100.c	(revision 18070)
+++ ag7100.c	(working copy)
@@ -76,6 +76,7 @@
 
 /* if 0 compute in init */
 int tx_len_per_ds = 0;
+int phy_in_reset = 0;
 #if defined(CONFIG_AR9100) && defined(CONFIG_AG7100_GE1_RMII)
 void  ag7100_tx_flush(ag7100_mac_t *mac);
 void howl_10baset_war(ag7100_mac_t *mac);
@@ -257,9 +258,12 @@
     if (mac->mac_unit == 1) 
         athrs16_reg_init();
 #endif
+    phy_in_reset = 1;
 
     ag7100_phy_setup(mac->mac_unit);
 
+    phy_in_reset = 0;
+
 #if defined(CONFIG_AR9100) && defined(SWITCH_AHB_FREQ)
     ar7100_reg_wr_nf(AR7100_PLL_CONFIG, pll);
     udelay(100*1000);
@@ -285,8 +289,14 @@
 
     dev->trans_start = jiffies;
 
+    /*
+     * Keep carrier off while initialization and switch it once the link is up.
+     */
+    netif_carrier_off(dev);
+
     napi_enable(&mac->mac_napi);
     ag7100_int_enable(mac);
+    ag7100_intr_enable_rxovf(mac);
     ag7100_rx_start(mac);
     netif_start_queue(dev);
 
@@ -311,8 +321,8 @@
 
     spin_lock_irqsave(&mac->mac_lock, flags);
     napi_disable(&mac->mac_napi);
+    netif_carrier_off(dev);
     netif_stop_queue(dev);
-    netif_carrier_off(dev);
 
     ag7100_hw_stop(mac);
     free_irq(mac->mac_irq, dev);
@@ -936,8 +946,11 @@
     {
         if (carrier)
         {
-//            printk(MODULE_NAME ": unit %d: phy not up carrier %d\n", mac->mac_unit, carrier);
+            printk(MODULE_NAME ": unit %d: phy not up carrier %d\n", mac->mac_unit, carrier);
+            ag7100_intr_disable_tx(mac);
+
             netif_carrier_off(dev);
+            netif_stop_queue(dev);
         }
         goto done;
     }
@@ -956,20 +969,21 @@
     if (carrier && (speed == mac->mac_speed) && (fdx == mac->mac_fdx)) 
         goto done;
 
-//    printk(MODULE_NAME ": unit %d phy is up...", mac->mac_unit);
-//    printk("%s %s %s\n", mii_str[mac->mac_unit][mii_if(mac)], 
-//        spd_str[speed], dup_str[fdx]);
+    printk(MODULE_NAME ": unit %d phy is up...", mac->mac_unit);
+    printk("%s %s %s\n", mii_str[mac->mac_unit][mii_if(mac)], 
+        spd_str[speed], dup_str[fdx]);
 
     ag7100_set_mac_from_link(mac, speed, fdx);
 
-//    printk(MODULE_NAME ": done cfg2 %#x ifctl %#x miictrl %#x \n", 
-//        ag7100_reg_rd(mac, AG7100_MAC_CFG2), 
-//        ag7100_reg_rd(mac, AG7100_MAC_IFCTL),
-//        ar7100_reg_rd(mii_reg(mac)));
+    printk(MODULE_NAME ": done cfg2 %#x ifctl %#x miictrl %#x \n", 
+        ag7100_reg_rd(mac, AG7100_MAC_CFG2), 
+        ag7100_reg_rd(mac, AG7100_MAC_IFCTL),
+        ar7100_reg_rd(mii_reg(mac)));
     /*
     * in business
     */
     netif_carrier_on(dev);
+    netif_start_queue(dev);
 
 done:
 #if defined(CONFIG_ATHRS26_PHY) || defined(CONFIG_ATHRS16_PHY)    
@@ -1340,9 +1354,17 @@
 
     assert(isr == (isr & imr));
 
-    if (likely(isr & (AG7100_INTR_RX | AG7100_INTR_RX_OVF)))
+    if (isr & (AG7100_INTR_RX_OVF))
     {
         handled = 1;
+
+        ag7100_reg_wr(mac,AG7100_MAC_CFG1,(ag7100_reg_rd(mac,AG7100_MAC_CFG1)&0xfffffff3));
+
+        ag7100_intr_ack_rxovf(mac);
+    }
+    if (likely(isr & AG7100_INTR_RX))
+    {
+        handled = 1;
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24)
 	if (likely(napi_schedule_prep(&mac->mac_napi)))
 #else
@@ -1504,42 +1526,11 @@
     int head = r->ring_head, len, status, iquota = quota, more_pkts, rep;
     int i;
     ag7100_trc(iquota,"iquota");
-#if !defined(CONFIG_AR9100)
-    status = ag7100_reg_rd(mac, AG7100_DMA_RX_STATUS);
-#endif
+    status       =  ag7100_reg_rd(mac, AG7100_DMA_RX_STATUS);
 
 process_pkts:
     ag7100_trc(status,"status");
-#if !defined(CONFIG_AR9100)
     /*
-    * Under stress, the following assertion fails.
-    *
-    * On investigation, the following `appears' to happen.
-    *   - pkts received
-    *   - rx intr
-    *   - poll invoked
-    *   - process received pkts
-    *   - replenish buffers
-    *   - pkts received
-    *
-    *   - NO RX INTR & STATUS REG NOT UPDATED <---
-    *
-    *   - s/w doesn't process pkts since no intr
-    *   - eventually, no more buffers for h/w to put
-    *     future rx pkts
-    *   - RX overflow intr
-    *   - poll invoked
-    *   - since status reg is not getting updated
-    *     following assertion fails..
-    *
-    * Ignore the status register.  Regardless of this
-    * being a rx or rx overflow, we have packets to process.
-    * So, we go ahead and receive the packets..
-    */
-//    assert((status & AG7100_RX_STATUS_PKT_RCVD));
-//    assert((status >> 16));
-#endif
-    /*
     * Flush the DDR FIFOs for our gmac
     */
     ar7100_flush_ge(mac->mac_unit);
@@ -1709,7 +1700,6 @@
     * let's see what changed while we were slogging.
     * ack Rx in the loop above is no flush version. It will get flushed now.
     */
-    status       =  ag7100_reg_rd(mac, AG7100_DMA_RX_STATUS);
     more_pkts    =  (status & AG7100_RX_STATUS_PKT_RCVD);
 
     ag7100_trc(more_pkts,"more_pkts");
@@ -1817,6 +1807,9 @@
     */
     wmb();
 
+        ag7100_reg_wr(mac,AG7100_MAC_CFG1,(ag7100_reg_rd(mac,AG7100_MAC_CFG1)|0xc));
+        ag7100_rx_start(mac);
+
     r->ring_tail = tail;
     ag7100_trc(refilled,"refilled");
 
@@ -2038,7 +2031,7 @@
     int val;
 
     ag7100_trc(data,"data");
-//    ag7100_rx_replenish(mac);
+    ag7100_rx_replenish(mac);
     if (ag7100_rx_ring_full(mac))
     {
         val = mod_timer(&mac->mac_oom_timer, jiffies+1);
@@ -2114,18 +2107,46 @@
 static struct net_device_stats 
     *ag7100_get_stats(struct net_device *dev)
 {
+
     ag7100_mac_t *mac = netdev_priv(dev);
-    int i;
+    int carrier = netif_carrier_ok(dev);
 
-//    sch = rcu_dereference(dev->qdisc);
-//    mac->mac_net_stats.tx_dropped = sch->qstats.drops;
+    if (mac->mac_speed < 1) {
+        return &mac->mac_net_stats;
+    }
 
-    i = ag7100_get_rx_count(mac) - mac->net_rx_packets;
-    if (i<0)
-        i=0;
+    /* 
+     *  MIB registers reads will fail if link is lost while resetting PHY.
+     */
+    if (carrier && !phy_in_reset)
+    {
 
-    mac->mac_net_stats.rx_missed_errors = i;
+        mac->mac_net_stats.rx_packets = ag7100_reg_rd(mac,AG7100_RX_PKT_CNTR);
+        mac->mac_net_stats.tx_packets = ag7100_reg_rd(mac,AG7100_TX_PKT_CNTR);
+        mac->mac_net_stats.rx_bytes   = ag7100_reg_rd(mac,AG7100_RX_BYTES_CNTR);
+        mac->mac_net_stats.tx_bytes   = ag7100_reg_rd(mac,AG7100_TX_BYTES_CNTR);
+        mac->mac_net_stats.tx_errors  = ag7100_reg_rd(mac,AG7100_TX_CRC_ERR_CNTR);
+        mac->mac_net_stats.rx_dropped = ag7100_reg_rd(mac,AG7100_RX_DROP_CNTR);
+        mac->mac_net_stats.tx_dropped = ag7100_reg_rd(mac,AG7100_TX_DROP_CNTR);
+        mac->mac_net_stats.collisions = ag7100_reg_rd(mac,AG7100_TOTAL_COL_CNTR);
+    
+            /* detailed rx_errors: */
+        mac->mac_net_stats.rx_length_errors = ag7100_reg_rd(mac,AG7100_RX_LEN_ERR_CNTR);
+        mac->mac_net_stats.rx_over_errors 	= ag7100_reg_rd(mac,AG7100_RX_OVL_ERR_CNTR);
+        mac->mac_net_stats.rx_crc_errors 	= ag7100_reg_rd(mac,AG7100_RX_CRC_ERR_CNTR);
+        mac->mac_net_stats.rx_frame_errors 	= ag7100_reg_rd(mac,AG7100_RX_FRM_ERR_CNTR);
+    	
+        mac->mac_net_stats.rx_errors  = ag7100_reg_rd(mac,AG7100_RX_CODE_ERR_CNTR) + 
+                                        ag7100_reg_rd(mac,AG7100_RX_CRS_ERR_CNTR) +      
+                                        mac->mac_net_stats.rx_length_errors +
+                                        mac->mac_net_stats.rx_over_errors +
+                                        mac->mac_net_stats.rx_crc_errors +
+                                        mac->mac_net_stats.rx_frame_errors; 
 
+        mac->mac_net_stats.multicast  = ag7100_reg_rd(mac,AG7100_RX_MULT_CNTR) +
+                                        ag7100_reg_rd(mac,AG7100_TX_MULT_CNTR);
+
+    }
     return &mac->mac_net_stats;
 }
 
Index: ag7100.h
===================================================================
--- ag7100.h	(revision 18070)
+++ ag7100.h	(working copy)
@@ -321,10 +321,27 @@
 #define AG7100_GE_MAC_ADDR2             0x44
 #define AG7100_MII0_CONTROL             0x18070000
 
+#define AG7100_RX_PKT_CNTR		0xa0
+#define AG7100_TX_PKT_CNTR		0xe4
+#define AG7100_RX_BYTES_CNTR		0x9c
+#define AG7100_TX_BYTES_CNTR		0xe0
+#define AG7100_RX_LEN_ERR_CNTR		0xc0
+#define AG7100_RX_OVL_ERR_CNTR		0xd0
+#define AG7100_RX_CRC_ERR_CNTR		0xa4
+#define AG7100_RX_FRM_ERR_CNTR		0xbc
+#define AG7100_RX_CODE_ERR_CNTR		0xc4
+#define AG7100_RX_CRS_ERR_CNTR		0xc8
+#define AG7100_RX_DROP_CNTR		0xdc
+#define AG7100_TX_DROP_CNTR		0x114
+#define AG7100_RX_MULT_CNTR		0xa8
+#define AG7100_TX_MULT_CNTR		0xe8
+#define AG7100_TOTAL_COL_CNTR		0x10c
+#define AG7100_TX_CRC_ERR_CNTR		0x11c
+
 /*
  * Everything but TX
  */
-#define AG7100_INTR_MASK    (AG7100_INTR_RX | AG7100_INTR_RX_OVF |  \
+#define AG7100_INTR_MASK    (AG7100_INTR_RX |  \
                              AG7100_INTR_RX_BUS_ERROR |             \
                              AG7100_INTR_TX_BUS_ERROR              \
                              /*| AG7100_INTR_TX_URN | AG7100_INTR_TX*/)
@@ -449,6 +466,13 @@
 #define ag7100_intr_disable_tx(_mac)                                     \
     ag7100_reg_rmw_clear((_mac), AG7100_DMA_INTR_MASK, AG7100_INTR_TX);
 
+#define ag7100_intr_enable_rxovf(_mac)                                      \
+    ag7100_reg_rmw_set((_mac), AG7100_DMA_INTR_MASK, AG7100_INTR_RX_OVF);
+
+#define ag7100_intr_disable_rxovf(_mac)                                      \
+    ag7100_reg_rmw_clear(mac, AG7100_DMA_INTR_MASK,                         \
+                        (AG7100_INTR_RX_OVF));
+
 #define ag7100_intr_disable_recv(_mac)                                      \
     ag7100_reg_rmw_clear(mac, AG7100_DMA_INTR_MASK,                         \
                         (AG7100_INTR_RX | AG7100_INTR_RX_OVF));
