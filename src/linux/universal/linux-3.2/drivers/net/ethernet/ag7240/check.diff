Index: ag7240.c
===================================================================
--- ag7240.c	(revision 16011)
+++ ag7240.c	(working copy)
@@ -146,8 +146,8 @@
 }
 
 #define addr_to_words(addr, w1, w2)  {                                 \
-    w1 = (addr[0] << 24) | (addr[1] << 16) | (addr[2] << 8) | addr[3]; \
-    w2 = (addr[4] << 24) | (addr[5] << 16) | 0;                        \
+    w1 = (addr[5] << 24) | (addr[4] << 16) | (addr[3] << 8) | addr[2]; \
+    w2 = (addr[1] << 24) | (addr[0] << 16) | 0;                        \
 }
 
 /*
@@ -448,8 +448,8 @@
     } 
     else 
     {
-        ag7240_reg_wr(mac, AG7240_MAC_CFG1, (AG7240_MAC_CFG1_RX_EN |
-            AG7240_MAC_CFG1_TX_EN));
+        ag7240_reg_wr(mac, AG7240_MAC_CFG1, (AG7240_MAC_CFG1_RX_EN | AG7240_MAC_CFG1_TX_EN | AG7240_MAC_CFG1_RX_FCTL | AG7240_MAC_CFG1_TX_FCTL));
+//        ag7240_reg_wr(mac, AG7240_MAC_CFG1, (AG7240_MAC_CFG1_RX_EN | AG7240_MAC_CFG1_TX_EN));
         ag7240_reg_rmw_set(mac, AG7240_MAC_CFG2, (AG7240_MAC_CFG2_PAD_CRC_EN | AG7240_MAC_CFG2_LEN_CHECK));
     }
 
@@ -1496,10 +1496,10 @@
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24)
 	ag7240_mac_t *mac = container_of(napi, ag7240_mac_t, mac_napi);
 	struct net_device *dev = mac->mac_dev;
-	int work_done,      max_work  = budget, status = 0;
+	int work_done=0,      max_work  = budget, status = 0;
 #else
 	ag7240_mac_t       *mac       = (ag7240_mac_t *)netdev_priv(dev);
-	int work_done,      max_work  = min(*budget, dev->quota), status = 0;
+	int work_done=0,      max_work  = min(*budget, dev->quota), status = 0;
 #endif
 
 
@@ -1667,6 +1667,7 @@
         dev->last_rx        = jiffies;
 
         quota--;
+        *work_done++;
         netif_receive_skb(skb);
         ag7240_ring_incr(head);
     }
@@ -1698,14 +1699,12 @@
     /*
     * more pkts arrived; if we have quota left, get rolling again
     */
-    if (quota)      goto process_pkts;
     /*
     * out of quota
     */
     ret = AG7240_RX_STATUS_NOT_DONE;
 
 done:
-    *work_done   = (iquota - quota);
 
     if (unlikely(ag7240_rx_ring_full(mac))) 
         return AG7240_RX_STATUS_OOM;
Index: athrs16_phy.c
===================================================================
--- athrs16_phy.c	(revision 16011)
+++ athrs16_phy.c	(working copy)
@@ -202,19 +202,49 @@
     //athrs16_reg_write(0x8, 0x012e1bea);
     athrs16_reg_write(0x8, 0x01261be2);
 #endif
+    athrs16_reg_write(S16_PORT_STATUS_REGISTER0, /* 0x7e */
+                                    S16_PORT_STATUS_SPEED_1000MBPS 
+                                    | S16_PORT_STATUS_TXMAC_EN 
+                                    | S16_PORT_STATUS_RXMAC_EN
+                                    | S16_PORT_STATUS_RXFLOW_EN
+                                    | S16_PORT_STATUS_TXFLOW_EN
+                                    | S16_PORT_STATUS_DUPLEX_FULL);
+
+    athrs16_reg_write(S16_PORT_STATUS_REGISTER1, /* 0x230 */
+                             S16_PORT_STATUS_LINK_EN
+                           | S16_PORT_STATUS_RXFLOW_EN
+                           | S16_PORT_STATUS_TXFLOW_EN);
+
+    athrs16_reg_write(S16_PORT_STATUS_REGISTER2, /*0x230*/
+                             S16_PORT_STATUS_LINK_EN
+                           | S16_PORT_STATUS_RXFLOW_EN
+                           | S16_PORT_STATUS_TXFLOW_EN);
+
+    athrs16_reg_write(S16_PORT_STATUS_REGISTER3, /*0x230*/
+                             S16_PORT_STATUS_LINK_EN
+                           | S16_PORT_STATUS_RXFLOW_EN
+                           | S16_PORT_STATUS_TXFLOW_EN);
+    athrs16_reg_write(S16_PORT_STATUS_REGISTER4, /*0x230*/
+                             S16_PORT_STATUS_LINK_EN
+                           | S16_PORT_STATUS_RXFLOW_EN
+                           | S16_PORT_STATUS_TXFLOW_EN);
     
-    athrs16_reg_write(S16_PORT_STATUS_REGISTER0, 0x7e);
-    athrs16_reg_write(S16_PORT_STATUS_REGISTER1, 0x200);
-    athrs16_reg_write(S16_PORT_STATUS_REGISTER2, 0x200);
-    athrs16_reg_write(S16_PORT_STATUS_REGISTER3, 0x200);
-    athrs16_reg_write(S16_PORT_STATUS_REGISTER4, 0x200);
+//    athrs16_reg_write(S16_PORT_STATUS_REGISTER0, 0x7e);
+//    athrs16_reg_write(S16_PORT_STATUS_REGISTER1, 0x200);
+//    athrs16_reg_write(S16_PORT_STATUS_REGISTER2, 0x200);
+//    athrs16_reg_write(S16_PORT_STATUS_REGISTER3, 0x200);
+//    athrs16_reg_write(S16_PORT_STATUS_REGISTER4, 0x200);
 #if CFG_BOARD_PB45
     athrs16_reg_write(0x600, 0x200);
     printk("CFG Board PB45 \n");
 #elif CFG_BOARD_AP96
     //athrs16_reg_write(0x600, 0x0);
     printk("CFG Board AP96 \n");
-    athrs16_reg_write(0x600, 0x200);
+//    athrs16_reg_write(0x600, 0x200);
+    athrs16_reg_write(S16_PORT_STATUS_REGISTER5, /*0x230*/
+                             S16_PORT_STATUS_LINK_EN
+                           | S16_PORT_STATUS_RXFLOW_EN
+                           | S16_PORT_STATUS_TXFLOW_EN);
 #endif
 
     athrs16_reg_write(S16_FLD_MASK_REG, 0x003f003f);
@@ -257,11 +287,41 @@
     athrs16_reg_write(S16_CPU_PORT_REGISTER,0x000001f0);
 
 
-#if 0
+#ifndef CONFIG_WZRG450
 // config wan = port 4, lan = 0 - 3
     /* Recognize tag packet from CPU */
+
+#ifdef CONFIG_WZRG300NH2
+//totally screwed up vlan mapping. wan port is 1, lan is 2 3 4 0
     athrs16_reg_write(S16_PORT_BASE_VLAN_REGISTER0,0xc03e0001); // 1111100000000000000001
     /* Insert PVID 1 to LAN ports */
+    athrs16_reg_write(S16_PORT_BASE_VLAN_REGISTER1,0x00390001); // 1110010000000000000001
+    athrs16_reg_write(S16_PORT_BASE_VLAN_REGISTER3,0x00330001); // 1100110000000000000001
+    athrs16_reg_write(S16_PORT_BASE_VLAN_REGISTER4,0x002b0001); // 1010110000000000000001
+    athrs16_reg_write(S16_PORT_BASE_VLAN_REGISTER5,0x001b0001); // 0110110000000000000001
+   /* Insert PVID 2 to WAN port */
+    athrs16_reg_write(S16_PORT_BASE_VLAN_REGISTER2,0x00010002); // 0000010000000000000010
+
+   /* Egress tag packet to CPU and untagged packet to LAN port */
+
+    athrs16_reg_write(S16_PORT_CONTROL_REGISTER0,0x00006204);
+
+    athrs16_reg_write(S16_PORT_CONTROL_REGISTER1,0x00006104);
+    athrs16_reg_write(S16_PORT_CONTROL_REGISTER2,0x00006104);
+    athrs16_reg_write(S16_PORT_CONTROL_REGISTER3,0x00006104);
+    athrs16_reg_write(S16_PORT_CONTROL_REGISTER4,0x00006104);
+    athrs16_reg_write(S16_PORT_CONTROL_REGISTER5,0x00006104);
+
+  /* Group port - 0,1,2,3 to VID 1 */
+    athrs16_reg_write(S16_VLAN_FUNC_REGISTER1,0x0000083b); // 100000111011
+    athrs16_reg_write(S16_VLAN_FUNC_REGISTER0,0x0001000a);
+
+  /*  port - 4  to VID 2 */
+    athrs16_reg_write(S16_VLAN_FUNC_REGISTER1,0x00000805); // 100000000101
+    athrs16_reg_write(S16_VLAN_FUNC_REGISTER0,0x0002000a); 
+#else
+    athrs16_reg_write(S16_PORT_BASE_VLAN_REGISTER0,0xc03e0001); // 1111100000000000000001
+    /* Insert PVID 1 to LAN ports */
     athrs16_reg_write(S16_PORT_BASE_VLAN_REGISTER1,0x001d0001); //  111010000000000000001
     athrs16_reg_write(S16_PORT_BASE_VLAN_REGISTER2,0x001b0001); //  110110000000000000001
     athrs16_reg_write(S16_PORT_BASE_VLAN_REGISTER3,0x00170001); //  101110000000000000001
@@ -286,8 +346,12 @@
   /*  port - 4  to VID 2 */
     athrs16_reg_write(S16_VLAN_FUNC_REGISTER1,0x00000821); // 100000100001
     athrs16_reg_write(S16_VLAN_FUNC_REGISTER0,0x0002000a); 
+#endif
 
 
+
+
+
 #else
     athrs16_reg_write(S16_PORT_BASE_VLAN_REGISTER0,0xc03e0001); // 1111100000000000000001
 
Index: athrs16_phy.h
===================================================================
--- athrs16_phy.h	(revision 16011)
+++ athrs16_phy.h	(working copy)
@@ -88,6 +88,38 @@
 #define S16_PORT_STATUS_REGISTER4            0x0500
 #define S16_PORT_STATUS_REGISTER5            0x0600
 
+
+/* bit definition for port status register
+ * 31:13    : RO :       : Reserved
+ *    12    : RW :      1: Reserved
+ *    11    : RW :      0: Reserved
+ *    10    : RW :      0: Reserved
+ *     9    : RW :      1: LIN_EN 
+ *     8    : RO :      1: 0 - phy link down. 1 - phy link up
+ *     7    : RW :      1; TX_HALF_FLOW_EN
+ *     6    : RW :      0: DUPLEX_MODE, 0-half, 1-full
+ *     5    : RW :      0: RxFlow control Enable
+ *     4    : RW :      0: TxFlow control Enable
+ *     3    : RW :      0: Rx Mac Enable
+ *     2    : RW :      0: Tx Mac Enable
+ *    1:0   : RW :      00: Speed, 00-10, 01-100, 10-1000, 11 -err mbps. 
+*/
+#define S16_PORT_STATUS_LINK_EN              (1<<9)
+#define S16_PORT_STATUS_LINK_STATUS          (1<<8)
+#define S16_PORT_STATUS_TXHALF_FLOW_EN       (1<<7)
+#define S16_PORT_STATUS_DUPLEX_HALF          (0<<6)
+#define S16_PORT_STATUS_DUPLEX_FULL          (1<<6)
+#define S16_PORT_STATUS_RXFLOW_EN            (1<<5)
+#define S16_PORT_STATUS_TXFLOW_EN            (1<<4)
+#define S16_PORT_STATUS_RXMAC_EN             (1<<3)
+#define S16_PORT_STATUS_TXMAC_EN             (1<<2)
+#define S16_PORT_STATUS_SPEED_10MBPS         0x0
+#define S16_PORT_STATUS_SPEED_100MBPS        0x1
+#define S16_PORT_STATUS_SPEED_1000MBPS       0x2
+#define S16_PORT_STATUS_SPEED_ERROR          0x3
+ 
+
+
 #define S16_PORT_BASE_VLAN_REGISTER0         0x0108 
 #define S16_PORT_BASE_VLAN_REGISTER1         0x0208
 #define S16_PORT_BASE_VLAN_REGISTER2         0x0308
Index: ar7240_s26_phy.c
===================================================================
--- ar7240_s26_phy.c	(revision 16011)
+++ ar7240_s26_phy.c	(working copy)
@@ -376,8 +376,7 @@
     }
    
     /* Enable flow control on CPU port */
-    athrs26_reg_write(PORT_STATUS_REGISTER0, 
-                      (athrs26_reg_read(PORT_STATUS_REGISTER0) | 0x30));
+    athrs26_reg_write(PORT_STATUS_REGISTER0, (athrs26_reg_read(PORT_STATUS_REGISTER0) | 0x30));
 
     /* Disable WAN mac inside S26 */
     athrs26_reg_write(PORT_STATUS_REGISTER5,0x0);
